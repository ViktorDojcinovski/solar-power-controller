name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write # OIDC to AWS
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-central-1
  ECR_REPO_NAME: power-controller-app # make sure this ECR repo exists
  TF_WORKING_DIR: infra
  FALLBACK_IMAGE: public.ecr.aws/nginx/nginx:latest # safety for first run

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.out.outputs.image_uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build backend image
        working-directory: app/backend
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:backend-${{ github.sha }} .

      - name: Scan backend image (Trivy)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:backend-${{ github.sha }}
          format: table
          exit-code: "0"
          vuln-type: os,library

      - name: Push backend image
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:backend-${{ github.sha }}

      - name: Export image URI
        id: out
        run: |
          echo "image_uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:backend-${{ github.sha }}" >> "$GITHUB_OUTPUT"

  terraform-plan-apply:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: dev
    env:
      IMAGE_URI: ${{ needs.build-and-push.outputs.image_uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -var "image_uri=${IMAGE_URI:-$FALLBACK_IMAGE}"

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve -var "image_uri=${IMAGE_URI:-$FALLBACK_IMAGE}"

      - name: Show ALB DNS
        if: always()
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform output -raw alb_dns || true
